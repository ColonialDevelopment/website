{
  "name": "babelify",
  "description": "Babel browserify transform",
  "version": "7.3.0",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/babel/babelify",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babelify.git"
  },
  "bugs": {
    "url": "https://github.com/babel/babelify/issues"
  },
  "dependencies": {
    "babel-core": "^6.0.14",
    "object-assign": "^4.0.0"
  },
  "devDependencies": {
    "babel-plugin-transform-es3-property-literals": "^6.0.14",
    "babel-plugin-transform-node-env-inline": "^6.0.14",
    "babel-plugin-transform-react-display-name": "^6.0.14",
    "babel-plugin-undeclared-variables-check": "^6.0.14",
    "babel-preset-es2015": "^6.0.14",
    "babel-preset-react": "^6.0.14",
    "browserify": "^13.0.0",
    "convert-source-map": "^1.1.0",
    "lodash.zipobject": "^4.1.3",
    "path-is-absolute": "^1.0.0",
    "tap": "^5.7.1"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "readme": "# babelify [![Build Status](https://travis-ci.org/babel/babelify.svg?branch=master)](https://travis-ci.org/babel/babelify)\n\n[Babel](https://github.com/babel/babel) [browserify](https://github.com/substack/node-browserify) transform.\n\nAs of [Babel 6.0.0](http://babeljs.io/blog/2015/10/29/6.0.0/) there are **no plugins included by default**. For babelify to be useful, you must also include some [presets](http://babeljs.io/docs/plugins/#presets) and/or [plugins](http://babeljs.io/docs/plugins/#transform).\n\n## Installation\n\n```sh\n$ npm install --save-dev babelify\n```\n\n## Usage\n\n### CLI\n\n```sh\n  $ browserify script.js -o bundle.js -t [ babelify --presets [ es2015 react ] ]\n```\n\n### Node\n\n```javascript\nvar fs = require(\"fs\");\nvar browserify = require(\"browserify\");\nbrowserify(\"./script.js\")\n  .transform(\"babelify\", {presets: [\"es2015\", \"react\"]})\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"));\n```\n\n**NOTE:** [Presets and plugins](http://babeljs.io/docs/plugins/) need to be installed as separate modules. For the above examples to work, you'd need to also install [`babel-preset-es2015`](https://www.npmjs.com/package/babel-preset-es2015) and [`babel-preset-react`](https://www.npmjs.com/package/babel-preset-react):\n\n```sh\n$ npm install --save-dev babel-preset-es2015 babel-preset-react\n```\n\n### Options\n\nSelected options are discussed below. See the [babel](http://babeljs.io/) docs for the complete list of [options](http://babeljs.io/docs/usage/options/).\n\nOptions may be passed in via standard [browserify](https://github.com/substack/node-browserify#btransformtr-opts) ways:\n\n```sh\n$ browserify -t [ babelify --presets [ es2015 react ] ]\n```\n\n```js\nbrowserify().transform(\"babelify\", {presets: [\"es2015\", \"react\"]});\n```\n\n```js\nvar babelify = require(\"babelify\");\nbrowserify().transform(babelify, {presets: [\"es2015\", \"react\"]});\n```\n\nOr, with the `configure` method:\n\n```js\nbrowserify().transform(babelify.configure({\n  presets: [\"es2015\", \"react\"]\n}));\n```\n\n#### Customizing extensions\n\nBy default, all files with the extensions `.js`, `.es`, `.es6` and `.jsx` are compiled. You can change this by passing an array of extensions.\n\n**NOTE:** This will override the default ones so if you want to use any of them\nyou have to add them back.\n\n```js\nbrowserify().transform(\"babelify\", {extensions: [\".babel\"]});\n```\n\n```sh\n$ browserify -t [ babelify --extensions .babel ]\n```\n\nNow you can use:\n\n```js\nimport NavBar from \"nav-bar.babel\";\nvar Panels = require(\"panels.babel\");\n```\n\n**NOTE:** By default, Browserify will only lookup `.js` and `.json` files when the extension is ommited (like node's `require`). To lookup additional extensions, use browserify's [`extensions` option](https://github.com/substack/node-browserify#browserifyfiles--opts).\n\n```js\nbrowserify({\n  extensions: [\".babel\"]\n}).transform(\"babelify\", {\n  extensions: [\".babel\"]\n});\n```\n\n```sh\n$ browserify --extensions=.babel -t [ babelify --extensions .babel ]\n```\n\nNow you can omit the extension and compile `.babel` files:\n\n```js\nimport NavBar from \"nav-bar\";\nvar Panels = require(\"panels\");\n```\n\n#### Source maps\n\nBy default, browserify sets the source map sources paths relative to the basedir (or to `process.cwd()` if not set). To make the sources paths absolute, set the `sourceMapsAbsolute` option on babelify:\n\n```js\nbrowserify().transform(\"babelify\", {\n  sourceMapsAbsolute: true\n});\n```\n\n```sh\n$ browserify -t [ babelify --sourceMapsAbsolute ]\n```\n\n#### Additional options\n\n```javascript\nbrowserify().transform(babelify.configure({\n  // Optional ignore regex - if any filenames **do** match this regex then\n  // they aren't compiled\n  ignore: /regex/,\n\n  // Optional only regex - if any filenames **don't** match this regex\n  // then they aren't compiled\n  only: /my_es6_folder/\n}))\n```\n\n```sh\n$ browserify -t [ babelify --ignore regex --only my_es6_folder ]\n```\n\n#### Babel result (metadata and others)\n\nBabelify emits a `babelify` event with Babel's full result object as the first\nargument, and the filename as the second. Browserify doesn't pass-through the\nevents emitted by a transform, so it's necessary to get a reference to the\ntransform instance before you can attach a listener for the event:\n\n```js\nvar b = browserify().transform(babelify);\n\nb.on(\"transform\", function(tr) {\n  if (tr instanceof babelify) {\n    tr.once(\"babelify\", function(result, filename) {\n      result; // => { code, map, ast, metadata }\n    });\n  }\n});\n```\n\n## FAQ\n\n### Why aren't files in `node_modules` being transformed?\n\nThis is the default browserify behavior.\n\nA possible solution is to add:\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [\"babelify\"]\n  }\n}\n```\n\nto the root of all your modules `package.json` that you want to be transformed. If you'd like to\nspecify options then you can use:\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [[\"babelify\", { \"presets\": [\"es2015\"] }]]\n  }\n}\n```\n\nAnother solution (proceed with caution!) is to run babelify as a [global](https://github.com/substack/node-browserify#btransformtr-opts) transform. Use the babel [`ignore` option](http://babeljs.io/docs/usage/options/) to narrow the number of files transformed:\n\n```js\nbrowserify().transform(babelify, {\n  global: true,\n  ignore: /\\/node_modules\\/(?!app\\/)/\n});\n```\n\nThe above example will transform all files except those in the `node_modules` directory that are not in `node_modules/app`.\n\n### Why am I not getting source maps?\n\nTo use source maps, enable them in browserify with the [`debug`](https://github.com/substack/node-browserify#browserifyfiles--opts) option:\n\n```js\nbrowserify({debug: true}).transform(\"babelify\");\n```\n\n```sh\n$ browserify -d -t [ babelify ]\n```\n\nIf you want the source maps to be of the post-transpiled code, then leave `debug` on, but turn off babelify's `sourceMaps`:\n\n```js\nbrowserify({debug: true}).transform(\"babelify\", {sourceMaps: false});\n```\n\n```sh\n$ browserify -d -t [ babelify --no-sourceMaps ]\n```\n",
  "readmeFilename": "README.md",
  "_id": "babelify@7.3.0",
  "dist": {
    "shasum": "4f289eb2fa9763050bc14ca7822776acc7f2b31d"
  },
  "_from": "babelify@",
  "_resolved": "https://registry.npmjs.org/babelify/-/babelify-7.3.0.tgz"
}
